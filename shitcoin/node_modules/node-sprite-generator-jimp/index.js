'use strict';

var async = require('async'),
	_ = require('underscore'),
	fs = require('fs'),
	Jimp = require('jimp'),
	mime = require('mime');

function readImage(path, callback) {
	new Jimp(path, function (err, image) {
		callback(null, {
			path: path,
			jimp: image,
			data: image.bitmap.data,
			width: image.bitmap.width,
			height: image.bitmap.height,
			mime: mime.lookup(path)
		});
	});
}

function readImages(filePaths, callback) {
	async.mapLimit(filePaths, 80, readImage, function (err, result) {
        if (err) {
            return callback(err);
        }
        // NOTE: async.mapLimit() apparently does not guarantee output order will match input order.
        // Restore the expected order before executing callback.
        var sortedImages = _(filePaths).map(function(filePath) {
            return _(result).findWhere({ path: filePath });
        })
        callback(null, sortedImages);
    });
}

function render(layout, filePath, options, callback) {
	new Jimp(layout.width, layout.height, function(err, spriteImage) {
		if(err) callback(err);
		_(layout.images).each(function (image) {
	    	new Jimp(image.jimp, function(err, subimage) {
	    		if (err) {
            		return callback(err);
        		}
	    		spriteImage.composite(subimage, image.x, image.y);
	    	});
	    });

		spriteImage.write(filePath, function(err) {
			callback(err);
		});

	});

}

module.exports = {
    readImages: readImages,
    render: render
};